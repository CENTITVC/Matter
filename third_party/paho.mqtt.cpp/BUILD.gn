import("//build_overrides/build.gni")
import("//build_overrides/chip.gni")
import("${build_root}/config/compiler/compiler.gni")
import("${build_root}/config/linux/pkg_config.gni")

import("paho.mqtt.cpp.gni")

paho_include_dir = "repo/include"
paho_cpp_src = [
  "repo/src/async_client.cpp",
  "repo/src/client.cpp",
  "repo/src/connect_options.cpp",
  "repo/src/create_options.cpp",
  "repo/src/disconnect_options.cpp",
  "repo/src/iclient_persistence.cpp",
  "repo/src/message.cpp",
  "repo/src/properties.cpp",
  "repo/src/response_options.cpp",
  "repo/src/ssl_options.cpp",
  "repo/src/string_collection.cpp",
  "repo/src/subscribe_options.cpp",
  "repo/src/token.cpp",
  "repo/src/topic.cpp",
  "repo/src/will_options.cpp",
]

# ---- Build Paho C Library from Source ----

# Define action to generate VersionInfo.h
exec_script("${chip_root}/scripts/centi/gn_paho_mqtt_c_version_info.py")

paho_c_common_src = [
  "repo/externals/paho-mqtt-c/src/Base64.c",
  "repo/externals/paho-mqtt-c/src/Clients.c",
  "repo/externals/paho-mqtt-c/src/LinkedList.c",
  "repo/externals/paho-mqtt-c/src/Log.c",
  "repo/externals/paho-mqtt-c/src/MQTTPacket.c",
  "repo/externals/paho-mqtt-c/src/MQTTPacketOut.c",
  "repo/externals/paho-mqtt-c/src/MQTTPersistence.c",
  "repo/externals/paho-mqtt-c/src/MQTTPersistenceDefault.c",
  "repo/externals/paho-mqtt-c/src/MQTTProperties.c",
  "repo/externals/paho-mqtt-c/src/MQTTProtocolClient.c",
  "repo/externals/paho-mqtt-c/src/MQTTProtocolOut.c",
  "repo/externals/paho-mqtt-c/src/MQTTReasonCodes.c",
  "repo/externals/paho-mqtt-c/src/MQTTTime.c",
  "repo/externals/paho-mqtt-c/src/Messages.c",
  "repo/externals/paho-mqtt-c/src/Proxy.c",
  "repo/externals/paho-mqtt-c/src/SHA1.c",
  "repo/externals/paho-mqtt-c/src/Socket.c",
  "repo/externals/paho-mqtt-c/src/SocketBuffer.c",
  "repo/externals/paho-mqtt-c/src/Thread.c",
  "repo/externals/paho-mqtt-c/src/Tree.c",
  "repo/externals/paho-mqtt-c/src/WebSocket.c",
  "repo/externals/paho-mqtt-c/src/utf-8.c",
]

if (paho_with_ssl) {
  pkg_config("openssl_config") {
    packages = [ "openssl" ]
  }
  config("paho_c_ssl") {
    defines = [ "OPENSSL=1" ]
  }
}

if (!paho_build_static) {
  executable("paho_mqtt_version") {
    sources = [ "repo/externals/paho-mqtt-c/src/MQTTVersion.c" ]
    public_configs = [ ":paho_mqtt_c_config" ]
  }
}

if (paho_build_static) {
  config("paho_c_static") {
    defines = [ "PAHO_MQTT_STATIC=1" ]
  }
}

if (paho_build_shared) {
  config("paho_c_shared") {
    defines = [ "PAHO_MQTT_EXPORT=1" ]
  }
}

if (paho_build_static) {
  if (paho_async_cli) {
    if (paho_with_ssl) {
      source_set("paho_c_async_ssl_static") {
        sources = paho_c_common_src + [
                    "repo/externals/paho-mqtt-c/src/MQTTAsync.c",
                    "repo/externals/paho-mqtt-c/src/MQTTAsyncUtils.c",
                    "repo/externals/paho-mqtt-c/src/SSLSocket.c",
                  ]
        public_configs = [
          ":paho_mqtt_c_config",
          ":paho_c_ssl",
          ":paho_c_static",
          ":openssl_config",
        ]
      }
    } else {
      source_set("paho_c_async_static") {
        sources = paho_c_common_src + [
                    "repo/externals/paho-mqtt-c/src/MQTTAsync.c",
                    "repo/externals/paho-mqtt-c/src/MQTTAsyncUtils.c",
                  ]
        public_configs = [
          ":paho_mqtt_c_config",
          ":paho_c_static",
        ]
      }
    }
  }
  if (paho_sync_cli) {
    if (paho_with_ssl) {
      source_set("paho_c_sync_ssl_static") {
        sources = paho_c_common_src + [
                    "repo/externals/paho-mqtt-c/src/MQTTClient.c",
                    "repo/externals/paho-mqtt-c/src/SSLSocket.c",
                  ]
        public_configs = [
          ":paho_mqtt_c_config",
          ":paho_c_ssl",
          ":paho_c_static",
          ":openssl_config",
        ]
      }
    } else {
      source_set("paho_c_sync_static") {
        sources = paho_c_common_src +
                  [ "repo/externals/paho-mqtt-c/src/MQTTClient.c" ]
        public_configs = [
          ":paho_mqtt_c_config",
          ":paho_c_static",
        ]
      }
    }
  }
}
if (paho_build_shared) {
  if (paho_async_cli) {
    if (paho_with_ssl) {
      source_set("paho_c_async_ssl_shared") {
        sources = paho_c_common_src + [
                    "repo/externals/paho-mqtt-c/src/MQTTAsync.c",
                    "repo/externals/paho-mqtt-c/src/MQTTAsyncUtils.c",
                    "repo/externals/paho-mqtt-c/src/SSLSocket.c",
                  ]
        public_configs = [
          ":paho_mqtt_c_config",
          ":paho_c_ssl",
          ":paho_c_shared",
          ":openssl_config",
        ]
      }
    } else {
      source_set("paho_c_async_shared") {
        sources = paho_c_common_src + [
                    "repo/externals/paho-mqtt-c/src/MQTTAsync.c",
                    "repo/externals/paho-mqtt-c/src/MQTTAsyncUtils.c",
                  ]
        public_configs = [
          ":paho_mqtt_c_config",
          ":paho_c_shared",
        ]
      }
    }
  }
  if (paho_sync_cli) {
    if (paho_with_ssl) {
      source_set("paho_c_sync_ssl_shared") {
        sources = paho_c_common_src + [
                    "repo/externals/paho-mqtt-c/src/MQTTClient.c",
                    "repo/externals/paho-mqtt-c/src/SSLSocket.c",
                  ]
        public_configs = [
          ":paho_mqtt_c_config",
          ":paho_c_ssl",
          ":paho_c_shared",
          ":openssl_config",
        ]
      }
    } else {
      source_set("paho_c_sync_shared") {
        sources = paho_c_common_src +
                  [ "repo/externals/paho-mqtt-c/src/MQTTClient.c" ]
        public_configs = [
          ":paho_mqtt_c_config",
          ":paho_c_shared",
        ]
      }
    }
  }
}

# Define the static or shared library for Paho C++ based on the build arguments
if (paho_build_static) {
  if (paho_async_cli) {
    if (paho_with_ssl) {
      static_library("paho_mqtt_cpp_async_ssl_static") {
        sources = paho_cpp_src
        public_configs = [ ":paho_mqttpp_config" ]
        public_deps =
            [ ":paho_c_async_ssl_static" ]  # Link to the Paho C library
      }
    } else {
      static_library("paho_mqtt_cpp_async_static") {
        sources = paho_cpp_src
        public_configs = [ ":paho_mqttpp_config" ]
        deps = [ ":paho_c_async_static" ]  # Link to the Paho C library
      }
    }
  } else {
    if (paho_with_ssl) {
      static_library("paho_mqtt_cpp_sync_ssl_static") {
        sources = paho_cpp_src
        public_configs = [ ":paho_mqttpp_config" ]
        deps = [ ":paho_c_sync_ssl_static" ]  # Link to the Paho C library
      }
    } else {
      static_library("paho_mqtt_cpp_sync_static") {
        sources = paho_cpp_src
        public_configs = [ ":paho_mqttpp_config" ]
        deps = [ ":paho_c_sync_static" ]  # Link to the Paho C library
      }
    }
  }
}
if (paho_build_shared) {
  if (paho_async_cli) {
    if (paho_with_ssl) {
      shared_library("paho_mqtt_cpp_async_ssl_shared") {
        sources = paho_cpp_src
        public_configs = [ ":paho_mqttpp_config" ]
        deps = [ ":paho_c_async_ssl_shared" ]  # Link to the Paho C library
      }
    } else {
      shared_library("paho_mqtt_cpp_async_shared") {
        sources = paho_cpp_src
        public_configs = [ ":paho_mqttpp_config" ]
        deps = [ ":paho_c_async_shared" ]  # Link to the Paho C library
      }
    }
  }
  if (paho_sync_cli) {
    if (paho_with_ssl) {
      shared_library("paho_mqtt_cpp_sync_ssl_shared") {
        sources = paho_cpp_src
        public_configs = [ ":paho_mqttpp_config" ]
        deps = [ ":paho_c_sync_ssl_shared" ]  # Link to the Paho C library
      }
    } else {
      shared_library("paho_mqtt-cpp_sync_shared") {
        sources = paho_cpp_src
        public_configs = [ ":paho_mqttpp_config" ]
        deps = [ ":paho_c_sync_shared" ]  # Link to the Paho C library
      }
    }
  }
}

# Compiler and linker settings for Paho C++
config("paho_mqttpp_config") {
  include_dirs = [ paho_include_dir ]

  # Use C++11
  cflags = [
    "-std=c++11",
    "-fPIC",
    "-Wno-error",
    "-fexceptions",
    "-fcommon",
  ]
}

# Compiler and linker settings for Paho C
config("paho_mqtt_c_config") {
  include_dirs = [ "repo/externals/paho-mqtt-c/src" ]
  cflags = [
    "-Wno-error",
    "-fcommon",
  ]

  defines = [ "HIGH_PERFORMANCE" ]
}
