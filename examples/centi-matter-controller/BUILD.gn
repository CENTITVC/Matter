# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/build.gni")
import("//build_overrides/chip.gni")

import("${chip_root}/build/chip/tools.gni")
import(
    "${chip_root}/examples/centi-matter-controller/centi-matter-controller.gni")
import("${chip_root}/src/lib/core/core.gni")

if (config_use_interactive_mode) {
  import("//build_overrides/editline.gni")
}

assert(chip_build_tools)

config("config") {
  include_dirs = [ "." ]

  if (config_cross_compilation) {
    include_dirs += [ "/opt/rpi-sysroot/usr/local/include" ]
  } else {
    lib_dirs = [ "/usr/local/lib/" ]
  }

  defines = [
    "CONFIG_USE_SEPARATE_EVENTLOOP=${config_use_separate_eventloop}",
    "CONFIG_USE_INTERACTIVE_MODE=${config_use_interactive_mode}",
    "CONFIG_CROSS_COMPILATION=${config_cross_compilation}",
  ]

  # Note: CONFIG_USE_LOCAL_STORAGE is tested for via #ifdef, not #if.
  if (config_use_local_storage) {
    defines += [ "CONFIG_USE_LOCAL_STORAGE" ]
  }

  cflags = [
    "-Wconversion",
    #"-v",
  ]
}

executable("centi-matter-controller") {
  public_deps = [
    "${chip_root}/src/app",
    "${chip_root}/src/app/icd/client:handler",
    "${chip_root}/src/app/icd/client:manager",
    "${chip_root}/src/controller",
    "${chip_root}/src/controller/data_model",
    "${chip_root}/src/credentials:file_attestation_trust_store",
    "${chip_root}/src/crypto",
    "${chip_root}/src/lib",
    "${chip_root}/src/lib/core:types",
    "${chip_root}/src/lib/support/jsontlv",
    "${chip_root}/src/platform",
    "${chip_root}/src/setup_payload",
  ]

  public_configs = [ ":config" ]

  if (chip_enable_transport_trace) {
    public_deps +=
        [ "${chip_root}/examples/common/tracing:trace_handlers_decoder" ]
  }

  sources = [
    "${chip_root}/src/controller/ExamplePersistentStorage.cpp",
    "${chip_root}/src/controller/ExamplePersistentStorage.h",
    "CeNTI_MQTT/centi_mqtt.cpp",
    "CeNTI_MQTT/centi_mqtt.h",
    "application/AppTask.cpp",
    "application/AppTask.h",
    "application/CredentialsIssuer/CredentialIssuerCommands.h",
    "application/CredentialsIssuer/ExampleCredentialIssuerCommands.h",
    "application/IllianceDevices/IllianceDevice.cpp",
    "application/IllianceDevices/IllianceDevice.h",
    "application/IllianceDevices/MatterDevicesCallbacks.cpp",
    "application/IllianceDevices/MatterDevicesCallbacks.h",
    "application/MatterCache.cpp",
    "application/MatterCache.h",
    "application/MatterClient/ClusterClients/BooleanStateClient.cpp",
    "application/MatterClient/ClusterClients/BooleanStateClient.h",
    "application/MatterClient/ClusterClients/CarbonDioxideClient.cpp",
    "application/MatterClient/ClusterClients/CarbonDioxideClient.h",
    "application/MatterClient/ClusterClients/ColorControlClient.cpp",
    "application/MatterClient/ClusterClients/ColorControlClient.h",
    "application/MatterClient/ClusterClients/DescriptorClient.cpp",
    "application/MatterClient/ClusterClients/DescriptorClient.h",
    "application/MatterClient/ClusterClients/DoorLockClient.cpp",
    "application/MatterClient/ClusterClients/DoorLockClient.h",
    "application/MatterClient/ClusterClients/ElectricalPowerClient.cpp",
    "application/MatterClient/ClusterClients/ElectricalPowerClient.h",
    "application/MatterClient/ClusterClients/IlluminanceClient.cpp",
    "application/MatterClient/ClusterClients/IlluminanceClient.h",
    "application/MatterClient/ClusterClients/LevelControlClient.cpp",
    "application/MatterClient/ClusterClients/LevelControlClient.h",
    "application/MatterClient/ClusterClients/MatterClientBase.h",
    "application/MatterClient/ClusterClients/OccupancySensingClient.cpp",
    "application/MatterClient/ClusterClients/OccupancySensingClient.h",
    "application/MatterClient/ClusterClients/OnOffClient.cpp",
    "application/MatterClient/ClusterClients/OnOffClient.h",
    "application/MatterClient/ClusterClients/RelativeHumidityClient.cpp",
    "application/MatterClient/ClusterClients/RelativeHumidityClient.h",
    "application/MatterClient/ClusterClients/TemperatureClient.cpp",
    "application/MatterClient/ClusterClients/TemperatureClient.h",
    "application/MatterClient/ClusterClients/WindowCoveringClient.cpp",
    "application/MatterClient/ClusterClients/WindowCoveringClient.h",
    "application/MatterClient/ClusterEventSubscriptionBase.h",
    "application/MatterClient/MatterClientClusterBase.h",
    "application/MatterClient/MatterClientClusterCommandBase.h",
    "application/MatterClient/MatterClientClusterReadBase.h",
    "application/MatterClient/MatterClientClusterSubscriptionBase.h",
    "application/MatterClient/MatterClientFactory.cpp",
    "application/MatterClient/MatterClientFactory.h",
    "application/MatterCommands/MatterCommandBase.h",
    "application/MatterCommands/MatterCommandDeviceSubscription.cpp",
    "application/MatterCommands/MatterCommandDeviceSubscription.h",
    "application/MatterCommands/MatterCommandSetWindowPosition.cpp",
    "application/MatterCommands/MatterCommandSetWindowPosition.h",
    "application/MatterCommands/MatterLightSettings.cpp",
    "application/MatterCommands/MatterLightSettings.h",
    "application/MatterCommands/MatterOpenCommissioningWindow.cpp",
    "application/MatterCommands/MatterOpenCommissioningWindow.h",
    "application/MatterCommands/MatterPairing.cpp",
    "application/MatterCommands/MatterPairing.h",
    "application/MatterDevices/AirQualitySensor.h",
    "application/MatterDevices/ContactSensor.h",
    "application/MatterDevices/DoorLock.h",
    "application/MatterDevices/ElectricalSensor.h",
    "application/MatterDevices/ExtendedColorLight.h",
    "application/MatterDevices/LightSensor.h",
    "application/MatterDevices/MatterDeviceBase.h",
    "application/MatterDevices/MatterDeviceTypes.h",
    "application/MatterDevices/MatterDevicesCommon.h",
    "application/MatterDevices/OccupancySensor.h",
    "application/MatterDevices/RelativeHumiditySensor.h",
    "application/MatterDevices/TemperatureSensor.h",
    "application/MatterEndpoint.cpp",
    "application/MatterEndpoint.h",
    "application/MatterManager.cpp",
    "application/MatterManager.h",
    "application/MatterNode.cpp",
    "application/MatterNode.h",
    "main.cpp",
  ]

  libs = [
    "paho-mqttpp3",  # Link against Paho MQTT C++ library
    "paho-mqtt3as",  # Link against Paho MQTT C library (asynchronous, no
                     # encryption)
  ]

  deps = [
    "${chip_root}/src/platform/logging:force_stdio",
    "${chip_root}/third_party/jsoncpp",
    "${chip_root}/third_party/paho.mqtt.cpp:paho_mqtt_cpp_async_ssl_static"
  ]

  output_dir = root_out_dir
}

group("linux") {
  deps = [ ":centi-matter-controller" ]
}

group("default") {
  deps = [ ":centi-matter-controller" ]
}
